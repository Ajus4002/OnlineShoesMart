
 <!-- Recent Sales -->
    <form id="salesDate-form">

            <div class="col-8 "style="margin-left:25%;margin-top:10%">
              <div class="card recent-sales overflow-auto">

                <div class="filter">
                  <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                  <ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                    <li class="dropdown-header text-start">
                      <h6>Filter</h6>
                    </li>

{{#each filters}}
                    <li><a class="dropdown-item" href="{{this.url}}">{{this.name}}</a></li>
                    {{/each}}
                  </ul>

                  
                </div>

                <div class="card-body">
                  <h5 class="card-title">Recent Sales <span>| Today</span></h5>

  <table cellspacing="5" cellpadding="5" border="0">
        <tbody><tr>
            <td>Minimum date:</td>
            <td><input type="text" id="min" name="min"></td>
        </tr>
        <tr>
            <td>Maximum date:</td>
            <td><input type="text" id="max" name="max"></td>
        </tr>
    </tbody></table>
                  <table class="table table-borderless" id="sales">
                    <thead>
                      <tr>
                        <th scope="col">Sl No</th>
                        <th scope="col">Customer </th>
                        
                        <th scope="col">Product Name</th>
                       
                       
                          <th scope="col">Total Price</th>
                           <th scope="col">Quntity</th>
                        <th scope="col">Payment Method</th>
                        <th scope="col">Order Date</th>
                         <th scope="col">Transaction ID</th>
                      </tr>
                    </thead>
                    <tbody>
                        {{#each  SalesOrders}}
                        {{#each this.items}}
                      <tr>
                        <th ><a href="#">{{@index}}</a></th>
                        
                        <td>{{../address.name}}</td>
                      

                                   
                                      
                                        <td>{{this.product.name}}</td>
                                        <td>{{this.total}}</td>
                                        <td>{{this.quantity}}</td>
                                       
                                    
  <td>{{../paymentType}}</td>    
  <td>{{../time}}</td>    
  <td>{{../_id}}</td>
                      </tr>
                      {{/each}}
                     {{/each}}

                      
                    </tbody>
                  </table>

                </div>

              </div>
            </div><!-- End Recent Sales -->

</form>


<script>

    var today = new Date();
    let tom = String(today.getDate() + 1).padStart(2, '0');
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0');
    var yyyy = today.getFullYear();
    today = yyyy + '-' + mm + '-' + dd;
    tommor = yyyy + '-' + mm + '-' + tom;
    $('#exp_date1').attr('max', today);
    $('#exp_date2').attr('max', tommor);
    document.getElementById('exp_date1').onchange = e => {
        value = e.target.value
        $('#exp_date2').attr('min', value);
    }

    let table;

    $("#salesDate-form").submit((e) => {
        e.preventDefault()
        $.ajax({
            url: "/admin/salesreport/report",
            method: "post",
            data: $("#salesDate-form").serialize(),
            success: (response) => {
                if (response.report) {
                    table.destroy();
                    document.getElementById('examplebody').innerHTML = ' '

                    for (let i = 0; i < response.report.length; i++) {
                        newelement = `<tr>
                            <td>${i + 1}</td>
                        <td> ${response.report[i]._id} </td>
                         <td> ${response.report[i].userId} </td>
                          <td><span class="badge rounded-pill alert-success"> ${response.report[i].paymentMethod}</span> </td>
                           <td> ${response.report[i].totalAmount} </td>
                            <td> ${response.report[i].date} </td>
                        </tr>`

                        document.getElementById('examplebody').innerHTML += newelement
                    }
                    table = $('#example').DataTable({
                        "footerCallback": function (row, data, start, end, display) {
                            var api = this.api(), data;

                            // Remove the formatting to get integer data for summation
                            var intVal = function (i) {
                                return typeof i === 'string' ?
                                    i.replace(/[\$,]/g, '') * 1 :
                                    typeof i === 'number' ?
                                        i : 0;
                            };

                            // Total over all pages
                            total = api
                                .column(4)
                                .data()
                                .reduce(function (a, b) {
                                    return intVal(a) + intVal(b);
                                }, 0);
                            // Update footer
                            $(api.column(4).footer()).html(
                                ' ( $' + total + ' total)'
                            );
                        },
                        dom: 'Bfrtip',
                        buttons: [
                            'excel', 'pdf', 'print'
                        ],
                        drawCallback: function () {
                            var hasRows = this.api().rows({ filter: 'applied' }).data().length > 0;
                            $('.buttons-excel')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                            $('.buttons-pdf')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                            $('.buttons-print')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                        }


                    });

                }

            }
        })
    })

    function getNewSale() {
        let stat = document.getElementById('status_sales').value
        $.ajax({
            url: '/admin/salesreport/monthlyreport',
            data: {
                type: stat
            },
            method: 'post',
            success: (response) => {
                if (response.wmyreport) {
                    table.destroy()
                    document.getElementById('examplebody').innerHTML = ' '
                    for (let i = 0; i < response.wmyreport.length; i++) {
                        newelement = `<tr>
                            <td>${i + 1}</td>
                        <td> ${response.wmyreport[i]._id} </td>
                         <td> ${response.wmyreport[i].userId} </td>
                          <td><span class="badge rounded-pill alert-success"> ${response.wmyreport[i].paymentMethod}</span> </td>
                           <td> ${response.wmyreport[i].totalAmount} </td>
                            <td> ${response.wmyreport[i].date} </td>
                        </tr>`
                        document.getElementById('examplebody').innerHTML += newelement
                    }
                    table = $('#example').DataTable({
                        "footerCallback": function (row, data, start, end, display) {
                            var api = this.api(), data;

                            // Remove the formatting to get integer data for summation
                            var intVal = function (i) {
                                return typeof i === 'string' ?
                                    i.replace(/[\$,]/g, '') * 1 :
                                    typeof i === 'number' ?
                                        i : 0;
                            };

                            // Total over all pages
                            total = api
                                .column(4)
                                .data()
                                .reduce(function (a, b) {
                                    return intVal(a) + intVal(b);
                                }, 0);


                            // Update footer
                            $(api.column(4).footer()).html(
                                ' ( $' + total + ' total)'
                            );
                        },
                        dom: 'Bfrtip',
                        buttons: [
                            'excel', 'pdf', 'print'
                        ],
                        drawCallback: function () {
                            var hasRows = this.api().rows({ filter: 'applied' }).data().length > 0;
                            $('.buttons-excel')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                            $('.buttons-pdf')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                            $('.buttons-print')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                        }
                    });

                }
            }
        })
    }


    $(document).ready(function () {
        table = $('#example').DataTable({
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;

                // Remove the formatting to get integer data for summation
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                // Total over all pages
                total = api
                    .column(4)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);


                // Update footer
                $(api.column(4).footer()).html(
                    ' ( $' + total + ' total)'
                );
            },
            dom: 'Bfrtip',
            buttons: [
                'excel', 'pdf', 'print'
            ],
            drawCallback: function () {
                var hasRows = this.api().rows({ filter: 'applied' }).data().length > 0;
                $('.buttons-excel')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                $('.buttons-pdf')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                $('.buttons-print')[0].style.visibility = hasRows ? 'visible' : 'hidden'
            }
        });
    });
</script>

<script>
    function reload() {
        const v = []
        let from = $('[name=from]').val()
        let to = $('[name=to]').val()

        if (from) {
            v.push(['from', from])
        }

        if (to) {
            v.push(['to', to])
        }

let v1 = v.map(v => v.join('=')).join('&')

        location.href = `/admin/sales-reporttable?${v1}`
    }
</script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>

<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/datetime/1.1.2/js/dataTables.dateTime.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.print.min.js"></script>

<script>
	var minDate, maxDate;
 
// Custom filtering function which will search data in column four between two values
$.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex ) {
        var min = minDate.val();
        var max = maxDate.val();
        var date = new Date( data[6] );

 
        if (
            ( min === null && max === null ) ||
            ( min === null && date <= max ) ||
            ( min <= date   && max === null ) ||
            ( min <= date   && date <= max )
        ) {
            return true;
        }
        return false;
    }
);
 
$(document).ready(function() {
    // Create date inputs
    minDate = new DateTime($('#min'), {
        format: 'MMMM Do YYYY'
    });
    maxDate = new DateTime($('#max'), {
        format: 'MMMM Do YYYY'
    });
 
    // DataTables initialisation
    var table = $('#sales').DataTable({
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ]
        });
 
    // Refilter the table
    $('#min, #max').on('change', function () {
        table.draw();
    });
});
</script>